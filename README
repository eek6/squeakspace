Squeakspace is a social media application with end to end encryption.
It lets you send messages to people and make posts that can be seen by groups
of people. Posts can contain text and attached files, such as images and small movies.
Other types of interaction, like instant messaging and video chat are not addressed.
All communication is encrypted using keys that belong to other users,
so the squeakspace servers only see metadata. Right now the only crypto engine
is a python wrapper around gpg.


This project is still under development. 


Architecture:

There are servers, which I call nodes, and clients.
The nodes are JSON servers and only communicate with clients.
At this time, nodes are isolated and do not communicate with
one another. The role of a node is to provide cloud storage
for clients. Nodes store an inbox for users, and users can
also create Groups on a node. A Group is an allocated
space on a node for people to make encrypted postings using
a shared key. Only users that have the group keys
can read and write to the group. Users invite each other
to groups by sending the shared group key in a message.


The client runs a local web server on the user's machine,
and the user accesses it by directing their web browser
to localhost:12323. Static html containing javascript is loaded,
and the javascript makes ajax requests to the local web server.
Here's a diagram:


User   <-->   Static HTML with Javascript   <-->   Local Web Server   <-->   Node


The Node handles storing and retrieving encrypted data, as well as spam prevention
using blacklists and proof of work schemes. The Local Web Server manages
all the cryptography. It stores the user's public and private keys in a local database.
It keeps an address book of contacts and their public keys, groups
that the user has access to, and addresses of nodes.
The HTML and javascript application does not handle any cryptography.
Information is passed through the Local Web Server and the necessary
cryptographic operations are applied as it passes through the proxy.


Things to do:
* Make an easy installation process
* Make the site look better
* Improve performance
* Experiment with different crypto engines
* Get a node running so people can start testing it out


Send questions and comments to eek@safe-mail.net
